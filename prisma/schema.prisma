// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User    @relation(fields: [authorId], references: [id])
//   authorId  Int
// }


model User {
  id                       Int                      @id @default(autoincrement())
  email                    String                   @unique 
  name                     String? 
  password                 String
  favourites               Favourite[]
  usersDietaryRestrictions UserDietaryRestriction[]
}

model Recipe {
  id           Int         @id @default(autoincrement())
  title        String
  ingredients  String[]
  instructions String
  image        String?
  cuisine      String?
  meal         String?
  favourites   Favourite[]
}

model Favourite {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [user_id], references: [id])
  user_id   Int 
  recipe    Recipe @relation(fields: [recipe_id], references: [id])
  recipe_id Int 
}

model DietaryRestriction {
  id                       Int                      @id @default(autoincrement())
  name                     String
  usersDietaryRestrictions UserDietaryRestriction[]
}

model UserDietaryRestriction {
  id                    Int                @id @default(autoincrement())
  user                  User               @relation(fields: [user_id], references: [id])
  user_id               Int
  dietaryRestriction    DietaryRestriction @relation(fields: [dietaryRestriction_id], references: [id])
  dietaryRestriction_id Int
}

// -- users: Stores user details, preferences, and saved recipes:
// -- Attributes: id, name, email, password

// -- recipes: Stores all recipe data:
// -- Attributes: id, title, ingredients, instructions, image, cuisine, meal

// -- favourites: Links users to their saved recipes:
// -- Attributes: id, user_id, recipe_id

// -- dietaryRestrictions: A list of known dietary restrictions:
// -- Attributes: id, name

// -- userDietaryRestrictions: Holds data for users and dietaryRestricition choices:
// -- Attributes: id, user_id, dietaryRestrictions_id
// DROP TABLE IF EXISTS userDietaryRestrictions CASCADE;
// DROP TABLE IF EXISTS dietaryRestrictions CASCADE;
// DROP TABLE IF EXISTS favourites CASCADE;
// DROP TABLE IF EXISTS recipes CASCADE;
// DROP TABLE IF EXISTS users CASCADE;

// CREATE TABLE users (
//   id SERIAL PRIMARY KEY,
//   name VARCHAR(255) NOT NULL,
//   email VARCHAR(255) UNIQUE NOT NULL,
//   password VARCHAR(255) NOT NULL
// );

// CREATE TABLE recipes (
//   id SERIAL PRIMARY KEY,
//   title VARCHAR(255) NOT NULL,
//   ingredients TEXT NOT NULL,
//   instructions TEXT NOT NULL,
//   image VARCHAR(255),
//   cuisine VARCHAR(255),
//   meal VARCHAR(255)
// );

// CREATE TABLE favourites (
//   id SERIAL PRIMARY KEY,
//   user_id INTEGER NOT NULL,
//   recipe_id INTEGER NOT NULL,
//   FOREIGN KEY (user_id) REFERENCES users(id),
//   FOREIGN KEY (recipe_id) REFERENCES recipes(id)
// );

// CREATE TABLE dietaryRestrictions (
//   id SERIAL PRIMARY KEY,
//   name VARCHAR(255) NOT NULL
// );

// CREATE TABLE userDietaryRestrictions (
//   id SERIAL PRIMARY KEY,
//   user_id INTEGER NOT NULL,
//   dietary_restriction_id INTEGER NOT NULL,
//   FOREIGN KEY (user_id) REFERENCES users(id),
//   FOREIGN KEY (dietary_restriction_id) REFERENCES dietaryRestrictions(id)
// );
